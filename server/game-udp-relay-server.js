// Generated by CoffeeScript 1.4.0
(function() {
  var ByteBuffer, Control, PORT, Pika, ProtoBuf, add_client, builder, clients, dgram, enemy_client, lookup_client, server;

  ProtoBuf = require("protobufjs");

  builder = ProtoBuf.protoFromFile("../protocol/Control.proto");

  Pika = builder.build("Pika");

  Control = Pika.Game.Control;

  ByteBuffer = require("bytebuffer");

  PORT = 5567;

  dgram = require('dgram');

  server = dgram.createSocket('udp4');

  clients = new Array();

  server.bind(PORT, function() {
    return console.log("SOCKET BINDED");
  });

  lookup_client = function(rinfo) {
    var client, result, _i, _len;
    result = void 0;
    for (_i = 0, _len = clients.length; _i < _len; _i++) {
      client = clients[_i];
      if (client.address === rinfo.address && client.port === rinfo.port) {
        result = client;
      }
    }
    if (result === void 0) {
      return void 0;
    }
    return result;
  };

  enemy_client = function(rinfo) {
    var client, result, _i, _len;
    result = void 0;
    for (_i = 0, _len = clients.length; _i < _len; _i++) {
      client = clients[_i];
      if (client.address !== rinfo.address || client.port !== rinfo.port) {
        result = client;
      }
    }
    if (result === void 0) {
      return void 0;
    }
    return result;
  };

  add_client = function(rinfo) {
    if (clients.length < 2) {
      clients.push({
        "port": rinfo.port,
        "address": rinfo.address
      });
      console.log("[+] Num of client(s) : " + clients.length + "  ");
      return clients[clients.length - 1];
    } else {
      console.log("[+] Too much clients");
      return void 0;
    }
  };

  server.on("message", function(msg, rinfo) {
    var buf, client, enemy, myMessage;
    console.log("server got: " + msg + "(" + msg.length + " bytes) from " + rinfo.address + ":" + rinfo.port);
    buf = ByteBuffer.wrap(msg);
    try {
      myMessage = Control.decode(buf);
    } catch (e) {
      if (e.msg) {
        console.log("decoded message with missing required fields" + e.msg);
      } else {
        console.log("something is weird");
      }
    }
    client = lookup_client(rinfo);
    if (client === void 0) {
      client = add_client(rinfo);
    }
    if (client === void 0) {
      enemy = void 0;
    } else {
      enemy = enemy_client(client);
    }
    if (enemy !== void 0) {
      return server.send(msg, 0, msg.length, enemy.port, enemy.address, function(err, bytes) {
        return console.log("sent " + bytes + " bytes of data");
      });
    }
  });

  server.on("listening", function() {
    var address;
    address = server.address();
    return console.log("server listening " + address.address + ":" + address.port);
  });

}).call(this);
